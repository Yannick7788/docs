import{_ as s,c as i,o as a,aV as n}from"./chunks/framework.MiujXLIZ.js";const y=JSON.parse('{"title":"环境变量和模式","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vite/环境变量和模式.md","filePath":"vue/vite/环境变量和模式.md","lastUpdated":1719325183000}'),e={name:"vue/vite/环境变量和模式.md"},l=n(`<h1 id="环境变量和模式" tabindex="-1">环境变量和模式 <a class="header-anchor" href="#环境变量和模式" aria-label="Permalink to &quot;环境变量和模式&quot;">​</a></h1><ul><li>环境变量：项目中根据不同的变量来执行不同得逻辑或者加载不同的资源 变量根据环境的变化而被<b style="color:#f00;">静态替换</b></li><li>模式：项目的运行方式(或者说启动方式)，或者说所执行的操作------&gt;目前是这么理解的</li></ul><p><a href="https://cn.vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noreferrer">vite环境变量和模式</a></p><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html" target="_blank" rel="noreferrer">vue cli 环境变量和模式</a></p><br><h2 id="_1-vite中的环境变量" tabindex="-1">1.vite中的环境变量 <a class="header-anchor" href="#_1-vite中的环境变量" aria-label="Permalink to &quot;1.vite中的环境变量&quot;">​</a></h2><p>目前的了解，Vite和Vue Cli 都是通过 <a href="https://github.com/motdotla/doten" target="_blank" rel="noreferrer">dotenv</a> 这个库来读取项目中的环境变量文件（.env文件），</p><ol><li>Vite 在一个特殊的 <code>import.meta.env</code> 对象上暴露环境变量。这里有一些在所有情况下都可以使用的<code>内建变量</code>：</li></ol><ul><li>import.meta.env.MODE: {string} 应用运行的模式。</li><li>import.meta.env.BASE_URL: {string} 部署应用时的基本 URL。他由base 配置项决定。</li><li>import.meta.env.PROD: {boolean} 应用是否运行在生产环境。</li><li>import.meta.env.DEV: {boolean} 应用是否运行在开发环境 (永远与 <code>import.meta.env.PROD</code> 相反)。</li><li>import.meta.env.SSR: {boolean} 应用是否运行在 server 上。</li></ul><ol start="2"><li>Vue Cli中将环境变量注入到了process.env（当前项目运行的环境相关的对象，有很多属性）对象上，直接使用process.env[变量名]访问</li></ol><h2 id="_2-env文件" tabindex="-1">2.env文件 <a class="header-anchor" href="#_2-env文件" aria-label="Permalink to &quot;2.env文件&quot;">​</a></h2><p>上面提到的<a href="https://github.com/motdotla/doten" target="_blank" rel="noreferrer">dotenv</a>库加载的就是项目中的env文件, 在env文件中声明项目所需的额外环境变量</p><br><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                # </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">所有情况下都会加载</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">   优先级最低</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 可以放一些项目不变但是个环境都会用到的东西</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 如项目title前缀等</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          # </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">所有情况下都会加载</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">，</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">但会被</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> git</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 忽略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]         # </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">只在指定模式下加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   # </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">只在指定模式下加载</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">，</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">但会被</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> git</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 忽略</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>问题：</strong></p><p>我做单点登录时用到的： <code>.env.development.local</code></p><p>不同的环境通过<code>iframe</code>和<code>postMessage</code>跨域传递<code>token </code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 数据分析 .env.development</span></span>
<span class="line"><span>VUE_APP_DA_URL = &#39;http://localhost:9527&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 数据分析 .env.production</span></span>
<span class="line"><span>VUE_APP_DA_URL = &#39;http://192.168.255.156:9018&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><br><p style="color:red;">当时的环境：.env.development为\`development\`环境 以为线上的dev环境也为\`development\`,可到线上才发现为\`production\` 但是如果线上dev环境也为\`development\` 此时这个环境变量就错了 </p><p style="color:red;">线上的开发环境地址当时为：http://192.168.255.156:9018 ，如果项目的线上dev环境模式也为\`development\` 那么这个地址会有错误 因为读取的还是本地的localhost</p><p>此时需要一个只在本地跑项目的时候需要但是不管哪个线上环境都不需要的地址</p><p><strong>解决：</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">数据分析</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">development</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  将这个放在只在本地生效的env文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">VUE_APP_DA_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;http://localhost:9527&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><p>vite加载的环境变量也会通过 <code>import.meta.env</code> 以字符串形式暴露给客户端源码。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 **VITE_ **为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这些环境变量：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>VITE_ZKP = 666</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>vue cli中以<strong>VUE_APP <strong>开头，在vite中想配置指定的前缀可配置<a href="https://cn.vitejs.dev/config/shared-options.html#envprefix" target="_blank" rel="noreferrer">envprefix选项</a>，不过一般会使用默认的</strong>VITE_</strong></p><hr><p><strong>配置环境变量Typescript只能提示：</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/// </span><span style="--shiki-light:#6A737D;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&quot;vite/client&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ImportMetaEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;"> VITE_APP_TITLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 更多环境变量...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ImportMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ImportMetaEnv</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><br><p><strong>在vite.config.ts配置文件中拿到环境变量：</strong></p><p>vite提供了<a href="https://cn.vitejs.dev/guide/api-javascript.html#loadenv" target="_blank" rel="noreferrer">loadEnv()方法</a>来获取系统环境变量</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// loadEnv类型签名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> loadEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  envDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  prefixes</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;VITE_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>使用</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ConfigEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// process.cwd()   node api    此方法返回一个字符串，该字符串指定node.js进程的当前工作目录。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//  保证文件在不同的目录下执行时，路径始终不变</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> loadEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 更多配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_3-模式-mode" tabindex="-1">3. 模式（mode) <a class="header-anchor" href="#_3-模式-mode" aria-label="Permalink to &quot;3. 模式（mode)&quot;">​</a></h2><p>默认情况下，开发服务器 (dev 命令) 运行在 development (开发) 模式，而 build 命令则运行在 production (生产) 模式。</p><p>这意味着当执行 vite build 时，它会自动加载 .env.production 中可能存在的环境变量：</p><p>在某些情况下，若想在 vite build 时运行不同的模式来渲染不同的标题，你可以通过传递 --mode 选项标志来覆盖命令使用的默认模式。例如，如果你想在 staging （预发布）模式下构建应用：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 执行build的时候 使用.env.staging中的变量环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">vite</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> staging</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>mode去哪了：</strong></p><p>在package.json的脚本中的mode会传递给配置文件 vite.config.ts中的配置函数参数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export default defineConfig({ command, mode }: ConfigEnv): UserConfig =&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// defineConfig 的mode参数就是配置文件中指定的 没有自定义指定的话接收到的就是：开发环境：development     生产：production</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const env = loadEnv(process.cwd(), mode)</span></span>
<span class="line"><span>  return {</span></span>
<span class="line"><span>    // 更多配置</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,46),p=[l];function t(h,r,k,d,o,c){return a(),i("div",null,p)}const B=s(e,[["render",t]]);export{y as __pageData,B as default};
