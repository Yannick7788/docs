import{_ as s,c as t,o as e,aV as a}from"./chunks/framework.BDfjdzks.js";const b=JSON.parse('{"title":"MutationObserver","description":"","frontmatter":{},"headers":[],"relativePath":"javaScript/Api/MutationObserver.md","filePath":"javaScript/Api/MutationObserver.md","lastUpdated":1719236634000}'),i={name:"javaScript/Api/MutationObserver.md"},n=a(`<h1 id="mutationobserver" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver" target="_blank" rel="noreferrer">MutationObserver</a> <a class="header-anchor" href="#mutationobserver" aria-label="Permalink to &quot;[MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)&quot;">​</a></h1><blockquote><p><code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力</p></blockquote><h2 id="_1-mutationobserver构造函数" tabindex="-1">1. MutationObserver构造函数 <a class="header-anchor" href="#_1-mutationobserver构造函数" aria-label="Permalink to &quot;1. MutationObserver构造函数&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">警告</p><p>创建并返回一个新的观察器，它会在触发指定 <code>DOM</code> 事件时，调用指定的回调函数。<code>MutationObserver</code> 对 <code>DOM</code> 的观察不会立即启动；而必须先调用 <code>observe()</code> 方法来确定，要监听哪一部分的 <code>DOM</code> 以及要响应哪些更改。</p></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> MutationObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-1-mutationobserver构造函数参数" tabindex="-1">1.1 MutationObserver构造函数参数 <a class="header-anchor" href="#_1-1-mutationobserver构造函数参数" aria-label="Permalink to &quot;1.1 MutationObserver构造函数参数&quot;">​</a></h3><p><code>callback(mutationList, observer)</code> :<br> 一个回调函数，每当被<strong>指定的节点或子树以及配置项</strong>有 <code>DOM</code> 变动时会被调用。<br></p><p>两个参数：<br></p><ul><li><p><code>mutationList</code>:描述所有被触发改动的 <code>MutationRecord</code> 对象数组.<br></p></li><li><p><code>observer</code> : 调用该函数的 <code>MutationObserver</code> 对象(构造函数的实例对象)</p></li></ul><h2 id="_2-mutationobserver实例" tabindex="-1">2.MutationObserver实例 <a class="header-anchor" href="#_2-mutationobserver实例" aria-label="Permalink to &quot;2.MutationObserver实例&quot;">​</a></h2><blockquote><p>一个可以监听目标元素触发指定<code>DOM</code>事件的新的<code>MutationObserver</code> 实例。调用自身的observe() 方法开始监听指定目标。</p></blockquote><p><strong>实例方法:</strong><br></p><p><b style="color:red;">1. observe(target[, options])</b></p><p><strong>参数:</strong><br> 1. <code>target</code>: <code>DOM</code> 树中的一个要观察变化的 <code>DOM</code> <code>Node</code> (可能是一个 <code>Element</code>)，或者是被观察的子节点树的根节点 2. <code>options</code>: 此对象的配置项描述了 <code>DOM</code> 的哪些变化应该报告给 <code>MutationObserver</code> 的 <code>callback</code>。</p><p><code>options</code> 的属性如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><strong>subtree(可选)</strong></td><td>当为 true 时，将会监听以 target 为根节点的整个子树。包括子树中所有节点的属性，而不仅仅是针对 target。默认值为 false。</td></tr><tr><td><strong>childList(可选)</strong></td><td>当为 true 时，监听 target 节点中发生的节点的新增与删除（同时，如果 subtree 为 true，会针对整个子树生效）。默认值为 false。</td></tr><tr><td><strong>attributes(可选)</strong></td><td>当为 true 时观察所有监听的节点属性值的变化。默认值为 true，当声明了 attributeFilter 或 attributeOldValue，默认值则为 false。</td></tr><tr><td><strong>attributeFilter(可选)</strong></td><td>一个用于声明哪些属性名会被监听的数组。如果不声明该属性，所有属性的变化都将触发通知。</td></tr><tr><td><strong>attributeOldValue(可选)</strong></td><td>当为 true 时，记录上一次被监听的节点的属性变化；可查阅监听属性值了解关于观察属性变化和属性值记录的详情。默认值为 false。</td></tr><tr><td><strong>characterData(可选)</strong></td><td>当为 true 时，监听声明的 target 节点上所有字符的变化。默认值为 true，如果声明了 characterDataOldValue，默认值则为 false</td></tr><tr><td><strong>characterDataOldValue(可选)</strong></td><td>当为 true 时，记录前一个被监听的节点中发生的文本变化。默认值为 false</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">注意</p><p>当调用 <code>observe()</code> 时，<code>childList</code>、<code>attributes</code> 和 <code>characterData</code> 中，必须有一个参数为 <code>true</code>。否则会抛出 <code>TypeError</code> 异常。</p></div><p><b style="color:red;">2. disconnect()</b></p><blockquote><p>告诉观察者停止观察变动</p></blockquote><p><b style="color:red;">3. takeRecords()</b></p><blockquote><p>返回已检测到但尚未由观察者的回调函数处理的所有匹配 DOM 更改的列表，使变更队列保持为空。此方法最常见的使用场景是在断开观察者之前立即获取所有未处理的更改记录，以便在停止观察者时可以处理任何未处理的更改。</p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> targetNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;#someElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> observerOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  childList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> MutationObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">targetNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">observerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/* 准备停止监听器 此时抓取未处理的变更记录传递给回调继续执行完成 */</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> mutations</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> observer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">takeRecords</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mutations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mutations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**确保变更记录全部处理完成了 取消监听 */</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>代码中第 12-18 行抓取了所有未处理的变更记录，然后调用回调，并将变更记录列表传递给回调，以保证所有变更记录都被处理。这是在调用 <code>disconnect()</code> 之前完成的，以便停止观察 DOM。</p></div><h2 id="_3-mutationrecord对象" tabindex="-1">3.MutationRecord对象 <a class="header-anchor" href="#_3-mutationrecord对象" aria-label="Permalink to &quot;3.MutationRecord对象&quot;">​</a></h2><blockquote><p>每个 <code>MutationRecord</code> 都代表一个独立的 <code>DOM</code> 变化，在每次随 <code>DOM</code> 变化调用 <code>MutationObserver</code>构造函数的回调函数时，一个相应的 <code>MutationRecord</code> 会被作为参数，传递给回调函数(<code>callback</code>中的<code>mutationList</code>参数)。</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>type</code></td><td>如果是属性变化，则返回 &quot;attributes&quot;； 如果是 <code>characterData</code> 节点变化，则返回 &quot;characterData&quot;； 如果是子节点树 <code>childList</code> 变化，则返回 &quot;childList&quot;</td></tr><tr><td><code>target</code></td><td>根据 <code>type</code>，返回变化所影响的节点。 对于属性 <code>attributes</code> 变化，返回属性变化的节点。 对于 <code>characterData</code> 变化，返回 <code>characterData</code> 节点。 对于子节点树 <code>childList</code> 变化，返回子节点变化的节点</td></tr><tr><td><code>addedNodes</code></td><td>返回被添加的节点。 如果没有节点被添加，则该属性将是一个空的 <code>NodeList</code>。</td></tr><tr><td><code>removedNodes</code></td><td>返回被移除的节点。 如果没有节点被移除，则该属性将是一个空的 <code>NodeList</code>。</td></tr><tr><td><code>previousSibling</code></td><td>返回被添加或移除的节点之前的兄弟节点，或者 <code>null</code>。</td></tr><tr><td><code>nextSibling</code></td><td>返回被添加或移除的节点之后的兄弟节点，或者 <code>null</code>。</td></tr><tr><td><code>attributeName</code></td><td>返回被修改的属性的属性名，或者 <code>null</code>。</td></tr><tr><td><code>attributeNamespace</code></td><td>返回被修改属性的命名空间，或者 <code>null</code>。</td></tr><tr><td><code>oldValue</code></td><td>返回值取决于<code>type</code> 。 对于属性 <code>attributes</code> 变化，返回变化之前的属性值。 对于 <code>characterData</code> 变化，返回变化之前的数据。 对于子节点树 <code>childList</code> 变化，返回 <code>null</code>。<strong>注意，如果要让这个属性起作用，在相应的 实例调用 observe 方法式的options配置对象中，attributeOldValue 或者 characterDataOldValue 必须设置为 true。</strong></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title"><a href="https://vueuse.org/core/useMutationObserver/#usemutationobserver" target="_blank" rel="noreferrer">useMutationObserver</a></p><p>vue中的hooks库VueUse对<code>MutationObserver</code>进行了封装,vue项目可使用<a href="https://vueuse.org/core/useMutationObserver/#usemutationobserver" target="_blank" rel="noreferrer">useMutationObserver</a></p></div>`,27),r=[n];function o(l,d,c,p,h,k){return e(),t("div",null,r)}const g=s(i,[["render",o]]);export{b as __pageData,g as default};
